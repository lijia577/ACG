/* the main task is say you have
. . . . . . . . 
. . . . . . . .
. . . . . . . . 
. . . X 0 . . .
. . . 0 X . . . 
. . . . . . . .
. . . . . . . . 
. . . . . . . .

It is stored in a two D array with type X,O and null. Aussming that X is going to make a move. 
Figure out which . should be changed into ? 


meHelper explained 
For each X, explore eight directions:
step=1;
while(inBoard)
if ((step ==1 && current sign =(null or ?)) return (not this direction
if (cucurent sign is the same, in the case, X ) return (not this direction) 
//if (current sign is different, in the case, 0)keep going;
if (current sign is (null or ?) and step!=1) set current to be a question mark. 
 
 
Flip function:
Next, if the user choose one of the ? marks, then we should flip it. 
Again, assume that the current thing we are using is X, then explore 8 directrions: 
	for each direction:
		if the next token is X and step is 1, then not this direction;
		if the next token is NUll or Maybe, not this direction;
		if the next token is O, change it into X;
		if the next token is X and step is NOT 1, then stop. 
 
how to do computer Move:
Greedy, choose the step that can the flip the most token

loop though the board[][]. If the current thing is M, get the count and store it in a double array,
called computerCount[][]. get the max flip along the way. 

Now, when the computer need to take the move, go through computerCount[][], if one location matches 
the maxFlip, call flip at that [i][j] location

*/

how to do computer Move:
Greedy, choose the step that can the flip the most token

loop though the board[][]. If the current thing is M, get the count and store it in a double array,
called computerCount[][]. get the max flip along the way. 

Now, when the computer need to take the move, go through (via a random way) computerCount[][], if one location matches 
the maxFlip, call flip at that [i][j] location



