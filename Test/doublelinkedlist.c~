//In the spirit of preparing for the exam for the paradigm class
//This is a general purpose double linked list


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


//this is how to typedef a linked list. llnodetag is used so that you can refer to our self in the struct to say *next.
typedef struct llnodetag{
	void *data;
	struct llnodetag * next;
	struct llnodetag * prev;
}llNode;

llNode *head = NULL;
llNode *tail= NULL;

//The syntax of malloc is node = (llNode*) malloc(sizeof(llNode))  if you don't know where to put *, think about int*

llNode* constructor (void *x){
	llNode *newList;
	if( ( newList = (llNode*) malloc(sizeof(llNode)) )!=NULL){
		newList->data=x;
		newList->next=NULL;
		newList->prev=NULL;
	}else{
		printf("Mem loc error\n");
		exit(0);
	}
	return newList;
}

//when think about append, always draw a graph and think about head tail and etc.
void append(llNode *p){
	if(head==NULL){
		head=p;
		tail=p;
	}else{
		tail->next=p;
		p->prev=tail;
		tail=p;
	}
}

void printlist(){
	llNode *handle=head;
	while(handle!=NULL){
		printf("%d\n", *handle->data);
		handle=handle->next;
	}
}

//Try to make sure what happens if the search node is not here
void delete(llNode *p){
	llNode *prv, *cur;
	if((head==p)&&(tail==p)){
		head=tail=NULL;
	}else if(p==head){
		head =p->next;
	}else{
		for(prv=NULL,cur=head; cur!=p; prv=cur, cur=cur->next){
			if(cur ==tail){
				printf("The node you want to delete does not exist.\n");
				return;
			}	
		}
		//found the thing you want to delete. 
		prv->next=cur->next;
	}	
	free(p);
}

//insert p1 after p2, here the only exception case you need to think is just tail
void insertafter(llNode *p1, llNode *p2){
	if(p2==tail){
		tail->next=p1;
		tail=p1;
	}else{
		p1->next=p2->next;
		p2->next=p1;	
	}
}

llNode *search (void *x){
	llNode *handle;
	for(handle =head ; handle!=NULL; handle = handle->next){
		if(handle->data ==x) return handle;
	}
	return NULL;
}

//stare at this like crazy! You will need this sooner or later!
void clear(){
	llNode* h1, *h2;
	for(h1=head; h1!=NULL; h1 = h2){
	    h2 = h1->next;
	    free(h1);
	}
	head =tail =NULL;
}

void main(){
	int x=50;
	llNode *node1= constructor(&x);
	
	append(node1);
	
	printlist();

	//printlist();
}

