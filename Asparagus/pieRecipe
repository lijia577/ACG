Usage of if __name__=="__main__":
  After setting up the special variables, it will execute the import statement and load those modules. It will then evaluate the def block, creating a function object and creating a variable called myfunction that points to the function object. It will then read the if statement and see that __name__ does equal "__main__", so it will execute the block shown there.

One of the reasons for doing this is that sometimes you write a module (a .py file) where it can be executed directly. Alternatively, it can also be imported and used in another module. By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.

Data Type:
	Dictionary:
		How to declare: dictName = {"somekey":"somevalue", ... }
		How to query: dictName["somekey"] and the return value is "somevalue", just type dictName to see the whole list
		How to add/edit: dictName["new/oldkey"]="somevalue"
		How to delete: del dictName["somekey"]
		How to clear: clear dictName. It will clear all the stuff in it.
		Remarks: Keys are cases sentitive. There is no order. Add/edit is tricky bc you might overwrite.
		Mixing: there is no type, mix and match int, string, objects or other dictionaries if needed.
		
	List:
		How to declare: aList = ["s","pumpkin"]
		how to query: aList[0], aList[2:], aList[-1], aList[:]//means exact copy of aList != aList.
		how to add: aList.append("sth") or aList.insert(2,"dog")  or aList.extend(["another", "list"])
	    how to search: "dog" in list //return ture or aList.index("dog") // return the index of dog	
		Remarks: random access using index, not require unique value.  Append/extend can be tricky. Append only take one arguments. It will accept ANY DATA TYPE
